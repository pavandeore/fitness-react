{"version":3,"sources":["components/quotes.js","components/randomquote.js","components/header.js","components/data.js","components/bodymain.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["data","Randomquote","random","Math","round","Quotes","length","className","Header","href","Data","name","age","height","weight","bodyMain","type","placeholder","onClick","dataObj","document","querySelector","value","push","setTimeout","alert","searchId","dietPlanDiv","forEach","entry","bmi","toFixed","status","innerHTML","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAUeA,G,sBAVF,CACT,qBACA,6BACA,2BACA,0BACA,wCACA,yBACA,yCCSWC,MAVf,WACI,IAAIC,EAASC,KAAKC,MAAMD,KAAKD,SAASG,EAAOC,QAE7C,OACI,yBAAKC,UAAU,eACX,2BAAIF,EAAOH,MCQRM,MAdf,WACI,OACI,yBAAKD,UAAU,UACX,yCACA,kBAAC,EAAD,MACA,4BACI,4BAAI,uBAAGE,KAAK,wBAAuB,uBAAGF,UAAU,uBAChD,4BAAI,uBAAGE,KAAK,uBAAsB,uBAAGF,UAAU,oBAC/C,4BAAI,uBAAGE,KAAK,yBAAwB,uBAAGF,UAAU,yBCIlDG,G,MAjBF,CACT,CAEIC,KAAK,cACLC,IAAK,KACLC,OAAO,KACPC,OAAO,MAEX,CAEIH,KAAK,eACLC,IAAK,KACLC,OAAO,KACPC,OAAO,SC0JAC,MAlKf,WAuII,OACI,6BACI,yBAAKR,UAAU,QACX,2BAAOS,KAAK,OAAOT,UAAU,OAAOU,YAAY,cAChD,2BAAOD,KAAK,SAAST,UAAU,MAAMU,YAAY,qBACjD,2BAAOD,KAAK,SAAST,UAAU,SAASU,YAAY,kCACpD,2BAAOD,KAAK,SAAST,UAAU,SAASU,YAAY,gCACpD,4BAAQV,UAAU,SAASW,QA5IvC,WAEI,IAKMC,EAAU,CACZR,KANWS,SAASC,cAAc,SAASC,MAO3CT,OANaO,SAASC,cAAc,WAAWC,MAO/CR,OANaM,SAASC,cAAc,WAAWC,MAO/CV,IANUQ,SAASC,cAAc,QAAQC,OAS7CZ,EAAKa,KAAKJ,GACVK,WAAWC,MAAM,WAAW,OA6HgCT,KAAK,UAAzD,WAIJ,yBAAKT,UAAU,aACX,8CACA,6BACI,2BAAOS,KAAK,OAAOT,UAAU,YAAYU,YAAY,oBACrD,4BAAQV,UAAU,WAAWW,QA9H7C,WAEI,IAAIQ,EAAWN,SAASC,cAAc,cAAcC,MAChDK,EAAcP,SAASC,cAAc,kBAEzCX,EAAKkB,SAAQ,SAACC,GAEV,GAAGA,EAAMlB,OAASe,EAAS,CAEvB,IAAII,GAbCjB,EAaagB,EAAMhB,OAbZC,EAamBe,EAAMf,OAAOe,EAAMjB,KAZ1C,IAAPE,EAAD,SAAaD,EAAQ,IAAGkB,QAAQ,IAa5BC,EAAS,KACVF,EAAI,MACHE,EAAS,yCACTL,EAAYM,UAAZ,0CACYJ,EAAMlB,KADlB,yBACuCmB,EADvC,4BAC8DE,EAD9D,omCA8BIF,EAAI,MACRE,EAAS,qCACTL,EAAYM,UAAZ,0CACYJ,EAAMlB,KADlB,yBACuCmB,EADvC,4BAC8DE,EAD9D,gkCA+BAA,EAAS,wCACTL,EAAYM,UAAZ,0CACYJ,EAAMlB,KADlB,yBACuCmB,EADvC,4BAC8DE,EAD9D,okCAjFhB,IAAiBnB,EAAOC,MAkI6CE,KAAK,UAA1D,aAEJ,6BAGJ,yBAAKT,UAAU,oB,MCrJZ2B,MARf,WACI,OACI,yBAAK3B,UAAU,UACX,wDCWG4B,MAVf,WACE,OACE,yBAAK5B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29404e55.chunk.js","sourcesContent":["const data = [\n    \"--No Pain No Gain!\",\n    \"--Only 2 Repetitions left!\",\n    \"--High weight hign Gain!\",\n    \"--Today is the new Day!\",\n    \"--Always remember sunday is for Rest!\",\n    \"--Get some rest Today!\",\n    \"--You have to mantain what you have!\"\n]\n\nexport default data;","import React from 'react';\nimport './randomQuoteStyles.css';\n\nimport Quotes from './quotes.js';\n\n\nfunction Randomquote(){\n    let random = Math.round(Math.random()*Quotes.length);\n\n    return(\n        <div className=\"randomquote\">    \n            <p>{Quotes[random]}</p>\n        </div>\n    )\n}\n\nexport default Randomquote;\n","import React from 'react';\nimport './headerStyles.css';\n\nimport RandomQuote from './randomquote';\n\nfunction Header(){\n    return(\n        <div className=\"header\">\n            <h2> Diet Pro</h2>\n            <RandomQuote />\n            <ul>\n                <li><a href=\"https://facebook.com\"><i className=\"fa fa-facebook-f\"></i></a></li>\n                <li><a href=\"https://twitter.com\"><i className=\"fa fa-twitter\"></i></a></li>\n                <li><a href=\"https://instagram.com\"><i className=\"fa fa-instagram\"></i></a></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Header;\n\n","const Data = [\n    {\n        \n        name:\"pawan deore\",\n        age: \"21\",\n        height:\"71\",\n        weight:\"47\"\n    },\n    {\n        \n        name:\"akash limkar\",\n        age: \"23\",\n        height:\"71\",\n        weight:\"147\"\n    }\n]\n\nexport default Data","import React from 'react';\n\nimport './bodyMainStyles.css';\nimport Data from './data.js';\n\nfunction bodyMain(){\n\n    function addEntryHandle(){\n    \n        let username = document.querySelector('.name').value;\n        let userheight = document.querySelector('.height').value;\n        let userweight = document.querySelector('.weight').value;\n        let userage = document.querySelector('.age').value;\n    \n        const dataObj = {\n            name: username,\n            height: userheight,\n            weight: userweight,\n            age: userage\n        }\n        \n        Data.push(dataObj)\n        setTimeout(alert('success'),1500)\n    }\n\n    function formula(height,weight,age){\n        return ((weight*703)/height**2).toFixed(2)\n    }\n\n    function getDataHandle(){\n\n        let searchId = document.querySelector('.search-id').value;\n        let dietPlanDiv = document.querySelector('.diet-plan-div');\n\n        Data.forEach((entry)=>{\n\n            if(entry.name === searchId){\n                \n                let bmi = formula(entry.height,entry.weight,entry.age);\n                let status = null;\n                if(bmi<18.5){\n                    status = 'Underweight Check Below your diet plan';\n                    dietPlanDiv.innerHTML = `\n                    <p>NAME - ${entry.name}</p> <p>BMI - ${bmi}</p> <p>Status - ${status}</p> <hr/>\n                    <h2>Underweight Diet Plan</h2>\n                    <div>\n                    <table class=\"table\">\n                    <tr>\n                        <th>Time</th>\n                        <th>Meal</th>\n                    </tr>\n                    <tr>\n                        <td>8 am </td> <td>1 Glass of Milk, 2 Banana</td>\n                    </tr>\n                    <tr>\n                        <td>10 am </td> <td> 4 Boiled Eggs, 2 Brown Bread with Salad</td>\n                    </tr>\n                    <tr>\n                        <td>1 pm </td> <td> 250gm Chicken with 2 chapatis </td>\n                    </tr>\n                    <tr>\n                        <td>4 pm </td> <td> 4 Boiled Eggs, 2 Boiled Potatoes</td>\n                    </tr>\n                    <tr>\n                        <td>8 pm </td> <td> 100gm vege Dinner with 2 chapatis</td>\n                    </tr>\n                    <tr>\n                        <td>10 pm </td> <td> 2 Boiled Eggs </td>\n                    </tr>\n                    </table>\n                    </div>`\n                }\n                else if(bmi<24.9){ \n                    status = 'Normal - Ideal Diet Plan Required!';\n                    dietPlanDiv.innerHTML = `\n                    <p>NAME - ${entry.name}</p> <p>BMI - ${bmi}</p> <p>Status - ${status}</p> <hr/>\n                    <h2>Ideal Diet Plan</h2>\n                    <div>\n                    <table class=\"table\">\n                    <tr>\n                        <th>Time</th>\n                        <th>Meal</th>\n                    </tr>\n                    <tr>\n                        <td>8 am </td> <td> 1 Cup Green Tea</td>\n                    </tr>\n                    <tr>\n                        <td>10 am </td> <td> 1 Egg-whites, 1 Cup Oats</td>\n                    </tr>\n                    <tr>\n                        <td>1 pm </td> <td> Normal Meal with 2 chapatis </td>\n                    </tr>\n                    <tr>\n                        <td>4 pm </td> <td> 1 Egg-whites, 1 Cup Oats</td>\n                    </tr>\n                    <tr>\n                        <td>8 pm </td> <td> Normal Meal with 2 chapatis - No Rice</td>\n                    </tr>\n                    <tr>\n                        <td>10 pm </td> <td> 1 Egg-whites </td>\n                    </tr>\n                    </table>\n                    </div>`\n                }\n                else {\n                    status = 'Overweight Check Below your diet plan';\n                    dietPlanDiv.innerHTML = `\n                    <p>NAME - ${entry.name}</p> <p>BMI - ${bmi}</p> <p>Status - ${status}</p> <hr/>\n                    <h2>Overweight Diet Plan</h2>\n                    <div>\n                    <table class=\"table\">\n                    <tr>\n                        <th>Time</th>\n                        <th>Meal</th>\n                    </tr>\n                    <tr>\n                        <td>8 am </td> <td> 1 Cup Green Tea</td>\n                    </tr>\n                    <tr>\n                        <td>10 am </td> <td> 1 Egg-whites, 1 Cup Oats</td>\n                    </tr>\n                    <tr>\n                        <td>1 pm </td> <td> Normal Meal with 2 chapatis </td>\n                    </tr>\n                    <tr>\n                        <td>4 pm </td> <td> 1 Egg-whites, 1 Cup Oats</td>\n                    </tr>\n                    <tr>\n                        <td>8 pm </td> <td> Normal Meal with 2 chapatis - No Rice</td>\n                    </tr>\n                    <tr>\n                        <td>10 pm </td> <td> 1 Egg-whites </td>\n                    </tr>\n                    </table>\n                    </div>`\n                }\n            }\n        })\n    }\n\n    return(\n        <div>\n            <div className=\"main\">\n                <input type=\"text\" className=\"name\" placeholder=\" Username\" />\n                <input type=\"number\" className=\"age\" placeholder=\"Age ( in Years )\" /> \n                <input type=\"number\" className=\"weight\" placeholder=\"Weight in LB (1 KG = 2.05 LB)\" />\n                <input type=\"number\" className=\"height\" placeholder=\"Height in In (1 Ft = 12 In)\" />\n                <button className=\"submit\" onClick={addEntryHandle} type=\"button\">Submit</button>\n            </div>\n\n\n            <div className=\"track-div\">\n                <h2>Fitness Record</h2>\n                <div>\n                    <input type=\"text\" className=\"search-id\" placeholder=\"Enter User Name\" />\n                    <button className=\"get-data\" onClick={getDataHandle} type=\"button\">Get Data</button>\n                </div>\n                <p></p>\n            </div>\n\n            <div className=\"diet-plan-div\">\n                \n            </div>\n        </div>\n    )\n}\n\nexport default bodyMain;\n\n","import React from 'react';\nimport'./footerStyles.css';\n\nfunction Footer(){\n    return(\n        <div className=\"footer\">\n            <footer> DietPro 2020 &copy;</footer>\n        </div>\n    )\n}\n\nexport default Footer;\n\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/header';\nimport MainBody from './components/bodymain';\nimport Footer from './components/footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <MainBody />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}